{"version":3,"sources":["number/number.js","App.js","serviceWorker.js","index.js"],"names":["Number","props","react_default","a","createElement","className","no1","no2","no3","no4","no5","no6","App","_useState","useState","_useState2","Object","slicedToArray","setNo1","_useState3","_useState4","setNo2","_useState5","_useState6","setNo3","_useState7","_useState8","setNo4","_useState9","_useState10","setNo5","_useState11","_useState12","setNo6","number_number","onClick","e","arr","i","Math","floor","random","j","sort","b","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPA6BeA,MA1Bf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbJ,EAAMK,KAERJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbJ,EAAMM,KAERL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbJ,EAAMO,KAERN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZJ,EAAMQ,KAETP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXJ,EAAMS,KAEVR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZJ,EAAMU,aCuBLC,MAxCf,WAAe,IAAAC,EACUC,mBAAS,GADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACLP,EADKS,EAAA,GACAG,EADAH,EAAA,GAAAI,EAEUL,mBAAS,GAFnBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAELZ,EAFKa,EAAA,GAEAC,EAFAD,EAAA,GAAAE,EAGUR,mBAAS,GAHnBS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGLd,EAHKe,EAAA,GAGAC,EAHAD,EAAA,GAAAE,EAIUX,mBAAS,GAJnBY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAILhB,EAJKiB,EAAA,GAIAC,EAJAD,EAAA,GAAAE,EAKUd,mBAAS,GALnBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKLlB,EALKmB,EAAA,GAKAC,EALAD,EAAA,GAAAE,EAMUjB,mBAAS,GANnBkB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAMLpB,EANKqB,EAAA,GAMAC,EANAD,EAAA,GA6Bb,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8B,EAAD,CAAQ7B,UAAU,UAAUC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,EAAKC,IAAKA,IACnFT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAAS8B,QAxB/B,SAAoBC,GAElB,IADA,IAAIC,EAAM,GACFC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACxBD,EAAIC,GAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAC1C,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAGI,IACpB,GAAGL,EAAIK,KAAOL,EAAIC,GAAG,CACnBA,IACA,OAIND,EAAIM,KAAK,SAASxC,EAAGyC,GACnB,OAAOzC,EAAIyC,IAEb1B,EAAOmB,EAAI,IACXhB,EAAOgB,EAAI,IACXb,EAAOa,EAAI,IACXV,EAAOU,EAAI,IACXP,EAAOO,EAAI,IACXJ,EAAOI,EAAI,MAKT,gBAGAnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cC5BDwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc58be5c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './number.css';\r\n\r\nfunction Number(props) {\r\n    return(\r\n        <div className=\"num_container\">\r\n           <div className=\"num_box\">\r\n            {props.no1}\r\n           </div>\r\n           <div className=\"num_box\">\r\n            {props.no2}\r\n           </div>\r\n           <div className=\"num_box\">\r\n            {props.no3}\r\n           </div>\r\n           <div className=\"num_box\">\r\n             {props.no4}\r\n           </div>\r\n           <div className=\"num_box\">\r\n              {props.no5}\r\n           </div>\r\n           <div className=\"num_box\">\r\n             {props.no6}\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Number;","import React, { useState } from 'react';\nimport Number from './number/number.js';\n\nimport './App.css';\n\nfunction App() {\n    const[no1, setNo1] = useState(0);\n    const[no2, setNo2] = useState(0);\n    const[no3, setNo3] = useState(0);\n    const[no4, setNo4] = useState(0);\n    const[no5, setNo5] = useState(0);\n    const[no6, setNo6] = useState(0);\n\n  function clickEvent(e){\n    let arr = [];\n    for(let i = 0; i < 6; i++){\n      arr[i] = Math.floor(Math.random() * 45) + 1;\n      for(let j = 0; j < i; j++){\n        if(arr[j] === arr[i]){\n          i--;\n          break;\n        }\n      }\n    }\n    arr.sort(function(a, b) { // 오름차순\n      return a - b;\n    });\n    setNo1(arr[0]);\n    setNo2(arr[1]);\n    setNo3(arr[2]);\n    setNo4(arr[3]);\n    setNo5(arr[4]);\n    setNo6(arr[5]);\n  }\n  return (\n    <div className=\"App\">\n      <Number className=\"numbers\" no1={no1} no2={no2} no3={no3} no4={no4} no5={no5} no6={no6}/>\n      <button className=\"button\" onClick ={clickEvent}>\n            생성\n      </button>\n      <div className=\"divider\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}